// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum JobType {
  DEVELOPER
  TESTER
  DESIGNER
  MANAGER
}

enum JobLevel {
  TRAINEE
  JUNIOR
  MID
  SENIOR
}

enum EmploymentType {
  CONTRACT_OF_WORK
  B2B
  CONTRACT_OF_MANDATE
}

enum WorkingType {
  REMOTE
  OFFICE
  HYBRID
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
}

enum Skill {
  JAVASCRIPT
  TYPESCRIPT
  JAVA
  PYTHON
  GIT
  REACT
  NODE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  companies    Company[]
  jobVacancies JobVacancy[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Company {
  id          String       @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  jobs        JobVacancy[]
}

model JobVacancy {
  id          String  @id @default(cuid())
  title       String
  description String
  authorId    String
  author      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  companyId   String
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  jobType         JobType
  jobLevel        JobLevel?
  experience      Int?
  employmentType  EmploymentType
  workingType     WorkingType
  paymentFrom     Float
  paymentTo       Float
  jobSkills       JobSkill[]
  location        String?
  experienceLevel ExperienceLevel?
  publishedAt     DateTime         @default(now())
  validUntil      DateTime
  isActive        Boolean          @default(true)
  jobApplications JobApplication[]
}

model JobApplication {
  id            String     @id @default(cuid())
  jobVacancyId  String
  jobVacancy    JobVacancy @relation(fields: [jobVacancyId], references: [id], onDelete: Cascade)
  applicantName String
  email         String
  phone         String?
  coverLetter   String
  resumeUrl     String?
  createdAt     DateTime   @default(now())
}

model JobSkill {
  id    String     @id @default(cuid())
  job   JobVacancy @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId String
  skill Skill
}
